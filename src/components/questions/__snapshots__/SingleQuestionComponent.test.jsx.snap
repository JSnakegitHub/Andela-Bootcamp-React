// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should call handleSubmit method  1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MemoryRouter>
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(SingleQuestionComponent)
        fetchQuestion={[Function]}
        fetchQuestions={[Function]}
        questions={
          Array [
            Object {
              "question_ask_date": "12/12/2018",
              "question_author": "hh",
              "question_body": "The explanation is here",
              "question_id": 24,
              "question_title": "My Own Question",
            },
          ]
        }
      />
    </Provider>
  </MemoryRouter>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Provider
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(SingleQuestionComponent)
          fetchQuestion={[Function]}
          fetchQuestions={[Function]}
          questions={
            Array [
              Object {
                "question_ask_date": "12/12/2018",
                "question_author": "hh",
                "question_body": "The explanation is here",
                "question_id": 24,
                "question_title": "My Own Question",
              },
            ]
          }
        />
      </Provider>,
      "history": Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "2o4465",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "2o4465",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(SingleQuestionComponent)
          fetchQuestion={[Function]}
          fetchQuestions={[Function]}
          questions={
            Array [
              Object {
                "question_ask_date": "12/12/2018",
                "question_author": "hh",
                "question_body": "The explanation is here",
                "question_id": 24,
                "question_title": "My Own Question",
              },
            ]
          }
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "fetchQuestion": [Function],
          "fetchQuestions": [Function],
          "questions": Array [
            Object {
              "question_ask_date": "12/12/2018",
              "question_author": "hh",
              "question_body": "The explanation is here",
              "question_id": 24,
              "question_title": "My Own Question",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Provider
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <Connect(SingleQuestionComponent)
            fetchQuestion={[Function]}
            fetchQuestions={[Function]}
            questions={
              Array [
                Object {
                  "question_ask_date": "12/12/2018",
                  "question_author": "hh",
                  "question_body": "The explanation is here",
                  "question_id": 24,
                  "question_title": "My Own Question",
                },
              ]
            }
          />
        </Provider>,
        "history": Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "2o4465",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "2o4465",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(SingleQuestionComponent)
            fetchQuestion={[Function]}
            fetchQuestions={[Function]}
            questions={
              Array [
                Object {
                  "question_ask_date": "12/12/2018",
                  "question_author": "hh",
                  "question_body": "The explanation is here",
                  "question_id": 24,
                  "question_title": "My Own Question",
                },
              ]
            }
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "fetchQuestion": [Function],
            "fetchQuestions": [Function],
            "questions": Array [
              Object {
                "question_ask_date": "12/12/2018",
                "question_author": "hh",
                "question_body": "The explanation is here",
                "question_id": 24,
                "question_title": "My Own Question",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
